{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jaimi\\\\Desktop\\\\IN3007_Individual_Project\\\\movie-sentiment-app\\\\client\\\\src\\\\components\\\\comparePageComponents\\\\CompareMovieSelector.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport Autosuggest from 'react-autosuggest';\n\nclass CompareMovieSelector extends React.Component {\n  constructor() {\n    super();\n\n    this.getSuggestions = movieName => {\n      const input = movieName.toString().trim().toLowerCase();\n      const inputLength = input.length;\n      return inputLength === 0 ? [] : this.state.all_movies.filter(movie => movie.movie_name.toLowerCase().slice(0, inputLength) === input);\n    };\n\n    this.state = {\n      movie_entered: \"\",\n      movie_suggestions: [],\n      all_movies: []\n    };\n  } // get the list of all movies from the database\n\n\n  getAllMovies() {\n    axios.get(\"/movieSentiment/findMovieSentiment\").then(apiResponse => {\n      this.setState({\n        all_movies: apiResponse.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  } // when the component is loaded, run the following methods\n\n\n  componentDidMount() {\n    this.getAllMovies();\n  } // SOURCE : https://github.com/moroshko/react-autosuggest\n  // FUNCTION : Create an autosuggest box depending on user input.\n  // STATUS : changed parameters\n  // BEGINS\n  // filter the list of movies to get suggestions depending on the current user input\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"movie_suggestion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, \"Choose a movie to compare!\"), /*#__PURE__*/React.createElement(Autosuggest, {\n      inputProps: {\n        placeholder: \"Enter a movie\",\n        autoComplete: \"abcd\",\n        name: \"movie_suggestion\",\n        id: \"movie_suggestion\",\n        value: this.state.movie_entered,\n        onChange: (event, {\n          newValue\n        }) => {\n          this.props.handler(newValue);\n          this.setState({\n            movie_entered: newValue\n          });\n        }\n      },\n      suggestions: this.state.movie_suggestions,\n      onSuggestionsFetchRequested: ({\n        value\n      }) => {\n        this.setState({\n          movie_suggestions: this.getSuggestions(value)\n        });\n      },\n      onSuggestionsClearRequested: () => {\n        this.setState({\n          movie_suggestions: []\n        });\n      },\n      getSuggestionValue: suggestion => suggestion.movie_name,\n      renderSuggestion: suggestion => /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 53\n        }\n      }, suggestion.movie_name),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }));\n  } // ENDS\n\n\n}\n\nexport default CompareMovieSelector;","map":{"version":3,"sources":["C:/Users/Jaimi/Desktop/IN3007_Individual_Project/movie-sentiment-app/client/src/components/comparePageComponents/CompareMovieSelector.js"],"names":["React","axios","Autosuggest","CompareMovieSelector","Component","constructor","getSuggestions","movieName","input","toString","trim","toLowerCase","inputLength","length","state","all_movies","filter","movie","movie_name","slice","movie_entered","movie_suggestions","getAllMovies","get","then","apiResponse","setState","data","catch","error","console","log","componentDidMount","render","placeholder","autoComplete","name","id","value","onChange","event","newValue","props","handler","suggestion"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios'\r\nimport Autosuggest from 'react-autosuggest'\r\n\r\nclass CompareMovieSelector extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            movie_entered : \"\",\r\n            movie_suggestions : [],\r\n            all_movies : []\r\n        }\r\n    }\r\n\r\n    // get the list of all movies from the database\r\n    getAllMovies() {\r\n        axios.get(\"/movieSentiment/findMovieSentiment\")\r\n        .then(apiResponse => {\r\n            this.setState({\r\n                all_movies : apiResponse.data\r\n            })\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    // when the component is loaded, run the following methods\r\n    componentDidMount() {\r\n        this.getAllMovies()\r\n    }\r\n\r\n    // SOURCE : https://github.com/moroshko/react-autosuggest\r\n    // FUNCTION : Create an autosuggest box depending on user input.\r\n    // STATUS : changed parameters\r\n    // BEGINS\r\n\r\n    // filter the list of movies to get suggestions depending on the current user input\r\n    getSuggestions = (movieName) => {\r\n        const input = movieName.toString().trim().toLowerCase();\r\n        const inputLength = input.length;\r\n      \r\n        return inputLength === 0 ? [] : this.state.all_movies.filter(movie =>\r\n          movie.movie_name.toLowerCase().slice(0, inputLength) === input\r\n        );\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"movie_suggestion\">Choose a movie to compare!</label>\r\n                <Autosuggest \r\n                    inputProps={{\r\n                        placeholder: \"Enter a movie\",\r\n                        autoComplete: \"abcd\",\r\n                        name : \"movie_suggestion\",\r\n                        id : \"movie_suggestion\",\r\n                        value : this.state.movie_entered,\r\n                        onChange: (event, {newValue}) => {\r\n                            this.props.handler(newValue)\r\n                            this.setState({\r\n                                movie_entered: newValue\r\n                            })\r\n                        }\r\n                    }} \r\n                    suggestions={this.state.movie_suggestions}\r\n                    onSuggestionsFetchRequested={ ({value}) => {\r\n                            this.setState({\r\n                                movie_suggestions : this.getSuggestions(value)\r\n                            })\r\n                        }\r\n                    }\r\n                    onSuggestionsClearRequested={() =>  {\r\n                        this.setState({\r\n                            movie_suggestions : []\r\n                        })\r\n                    }}\r\n                    getSuggestionValue={suggestion => suggestion.movie_name}\r\n                    renderSuggestion={suggestion => <span>{suggestion.movie_name}</span>}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // ENDS\r\n}\r\n\r\nexport default CompareMovieSelector;"]},"metadata":{},"sourceType":"module"}