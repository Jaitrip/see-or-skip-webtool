{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jaimi\\\\Desktop\\\\IN3007_Individual_Project\\\\movie-sentiment-app\\\\client\\\\src\\\\components\\\\MovieDetails.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport MovieVisualisation from './findSentimentPageComponents/MovieVisualisation.js';\nimport MoviePoster from './MoviePoster.js';\nimport \"../styles/FindSentimentStyles.css\";\nimport \"../styles/CompareMovieResultsStyles.css\";\nimport MovieTrailer from './MovieTrailer.js';\nimport moment from 'moment';\n\nclass MovieDetails extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movieFound: false,\n      component_location: this.props.component_location,\n      movieId: '',\n      movieName: this.props.movieName,\n      movieOverview: '',\n      movieReleaseDate: '',\n      reviewScore: '',\n      twitterSentiment: [],\n      youtubeSentiment: [],\n      seeOrSkip: '',\n      dateAnalysed: ''\n    };\n  } // get movie details from tmdb api\n\n\n  getMovieInformation(movieName) {\n    axios.get(\"https://api.themoviedb.org/3/search/movie\", {\n      params: {\n        api_key: '146fa0756d99220f8811aceb8a865301',\n        language: 'en-US',\n        query: movieName,\n        page: '1',\n        include_adult: 'false'\n      }\n    }).then(apiResponse => {\n      if (apiResponse.data.results !== []) {\n        var reviewScore = \"\"; // if movie has reviews then save them\n\n        if (Number(apiResponse.data.results[0].vote_average) !== 0) {\n          reviewScore = apiResponse.data.results[0].vote_average;\n        } else {\n          reviewScore = \"No Reviews Yet\";\n        }\n\n        this.setState({\n          movieFound: true,\n          movieId: apiResponse.data.results[0].id,\n          movieName: apiResponse.data.results[0].title,\n          movieOverview: apiResponse.data.results[0].overview,\n          movieReleaseDate: apiResponse.data.results[0].release_date,\n          reviewScore: reviewScore\n        });\n        this.checkIfMovieAnalysed(this.state.movieId);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  } // check if the movie has been analysed and stored in the db\n\n\n  checkIfMovieAnalysed(movie_id) {\n    axios.get(\"/movieSentiment/findMovieSentiment/\" + movie_id).then(apiResponse => {\n      if (apiResponse.data !== null) {\n        // if the movie was analysed less than 14 days ago, then save the sentiment to state\n        if (moment().subtract(14, \"days\").startOf(\"day\").isBefore(apiResponse.data.date_analysed)) {\n          this.setState({\n            movieFound: true,\n            twitterSentiment: [Number(apiResponse.data.twitter_positive_comments), Number(apiResponse.data.twitter_neutral_comments), Number(apiResponse.data.twitter_negative_comments)],\n            youtubeSentiment: [Number(apiResponse.data.youtube_positive_comments), Number(apiResponse.data.youtube_neutral_comments), Number(apiResponse.data.youtube_negative_comments)],\n            seeOrSkip: apiResponse.data.see_or_skip,\n            dateAnalysed: apiResponse.data.date_analysed\n          }); // callback to compare movies component if its being displayed on the compare page\n\n          if (this.state.component_location === \"compare\") {\n            this.props.handler(this.state.movieId, this.state.twitterSentiment, this.state.youtubeSentiment);\n          }\n        } else {\n          // if movie has not been analysed, find sentiment\n          this.findMovieSentiment(true);\n        }\n      } else {\n        this.findMovieSentiment(false);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  } // find the movie sentiment on youtube and twitter\n\n\n  findMovieSentiment(isUpdate) {\n    const api_url = \"http://127.0.0.1:5000/see-or-skip/get_sentiment\";\n    const data = JSON.stringify({\n      movie_name: this.state.movieName\n    }); // make a post request to the sentiment analysis api with the movie name\n\n    axios.post(api_url, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(apiResponse => {\n      // save movie sentiment\n      this.setState({\n        twitterSentiment: [Number(apiResponse.data.twitter_positive_comments), Number(apiResponse.data.twitter_neutral_comments), Number(apiResponse.data.twitter_negative_comments)],\n        youtubeSentiment: [Number(apiResponse.data.youtube_positive_comments), Number(apiResponse.data.youtube_neutral_comments), Number(apiResponse.data.youtube_negative_comments)],\n        dateAnalysed: new Date()\n      }); // if the component is being displayed on the compare page, call back to the parent component\n\n      if (this.state.component_location === \"compare\") {\n        this.props.handler(this.state.movieId, this.state.twitterSentiment, this.state.youtubeSentiment);\n      } // calculate see or skip\n\n\n      const totalPositive = Number(this.state.twitterSentiment[0]) + Number(this.state.youtubeSentiment[0]);\n      const totalNegative = Number(this.state.twitterSentiment[2]) + Number(this.state.youtubeSentiment[2]);\n\n      if (totalPositive > totalNegative) {\n        this.setState({\n          seeOrSkip: \"See!\"\n        });\n      } else {\n        this.setState({\n          seeOrSkip: \"Skip!\"\n        });\n      } // save / update movie sentiment\n\n\n      if (isUpdate) {\n        this.updateMovieSentiment();\n      } else {\n        this.addMovieSentimentToDatabase();\n      }\n    }).catch(error => {\n      console.log(error.response);\n    });\n  } // add a new movie sentiment to the database\n\n\n  addMovieSentimentToDatabase() {\n    // make a post request to the backend server with movie details\n    const api_url = \"/movieSentiment/saveMovieSentiment\";\n    const data = JSON.stringify({\n      movie_id: this.state.movieId,\n      movie_name: this.state.movieName,\n      release_date: this.state.movieReleaseDate,\n      twitter_positive_comments: this.state.twitterSentiment[0],\n      twitter_negative_comments: this.state.twitterSentiment[2],\n      twitter_neutral_comments: this.state.twitterSentiment[1],\n      youtube_positive_comments: this.state.youtubeSentiment[0],\n      youtube_negative_comments: this.state.youtubeSentiment[2],\n      youtube_neutral_comments: this.state.youtubeSentiment[1],\n      see_or_skip: this.state.seeOrSkip,\n      date_analysed: this.state.dateAnalysed\n    });\n    axios.post(api_url, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(apiResponse => console.log(apiResponse)).catch(error => {\n      console.log(error.response);\n    });\n  } // update movie sentiment in db\n\n\n  updateMovieSentiment() {\n    const api_url = \"/movieSentiment/updateMovieSentiment\";\n    const data = JSON.stringify({\n      movie_id: this.state.movieId,\n      movie_name: this.state.movieName,\n      release_date: this.state.movieReleaseDate,\n      twitter_positive_comments: this.state.twitterSentiment[0],\n      twitter_negative_comments: this.state.twitterSentiment[2],\n      twitter_neutral_comments: this.state.twitterSentiment[1],\n      youtube_positive_comments: this.state.youtubeSentiment[0],\n      youtube_negative_comments: this.state.youtubeSentiment[2],\n      youtube_neutral_comments: this.state.youtubeSentiment[1],\n      see_or_skip: this.state.seeOrSkip,\n      date_analysed: this.state.dateAnalysed\n    }); // make post request to backend server to update the movie sentiment\n\n    axios.post(api_url, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(apiResponse => console.log(apiResponse)).catch(error => {\n      console.log(error.response);\n    });\n  } // when the component mounts, get the movie sentiment\n\n\n  componentDidMount() {\n    this.getMovieInformation(this.state.movieName);\n  }\n\n  render() {\n    // if component is being displayed on the find sentiment page, display these objects\n    if (this.state.component_location === \"find\" && this.state.movieFound === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"findSentimentResults\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }\n      }, this.state.movieName), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"findSentimentMovieDetails\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"movieArea\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MoviePoster, {\n        image_size: \"w342\",\n        movie_title: this.state.movieName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"movieInformation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 19\n        }\n      }, this.state.movieOverview), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 19\n        }\n      }, \"Release Date: \", moment(this.state.movieReleaseDate).format(\"DD/MM/YYYY\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 19\n        }\n      }, \"Review Score: \", this.state.reviewScore), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 19\n        }\n      }, \"You should probably: \", this.state.seeOrSkip)))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"movieTrailer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MovieTrailer, {\n        movie_id: this.state.movieId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"visualisationArea\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MovieVisualisation, {\n        twitter_sentiment: this.state.twitterSentiment,\n        youtube_sentiment: this.state.youtubeSentiment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }\n      }))));\n    } else if (this.state.component_location === \"compare\" && this.state.movieFound === true) {\n      // if component is being displayed on the compare page, display these components \n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }\n      }, this.state.movieName), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"movieArea\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MoviePoster, {\n        image_size: \"w185\",\n        movie_title: this.state.movieName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"compareMovieInformation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }\n      }, this.state.movieOverview), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }\n      }, \"Release Date: \", moment(this.state.movieReleaseDate).format(\"DD/MM/YYYY\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }\n      }, \"Review Score: \", this.state.reviewScore), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }\n      }, \"You should probably: \", this.state.seeOrSkip))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }\n      }, \"Movie Not Found\");\n    }\n  }\n\n}\n\nexport default MovieDetails;","map":{"version":3,"sources":["C:/Users/Jaimi/Desktop/IN3007_Individual_Project/movie-sentiment-app/client/src/components/MovieDetails.js"],"names":["React","axios","MovieVisualisation","MoviePoster","MovieTrailer","moment","MovieDetails","Component","constructor","props","state","movieFound","component_location","movieId","movieName","movieOverview","movieReleaseDate","reviewScore","twitterSentiment","youtubeSentiment","seeOrSkip","dateAnalysed","getMovieInformation","get","params","api_key","language","query","page","include_adult","then","apiResponse","data","results","Number","vote_average","setState","id","title","overview","release_date","checkIfMovieAnalysed","catch","error","console","log","movie_id","subtract","startOf","isBefore","date_analysed","twitter_positive_comments","twitter_neutral_comments","twitter_negative_comments","youtube_positive_comments","youtube_neutral_comments","youtube_negative_comments","see_or_skip","handler","findMovieSentiment","isUpdate","api_url","JSON","stringify","movie_name","post","headers","Date","totalPositive","totalNegative","updateMovieSentiment","addMovieSentimentToDatabase","response","componentDidMount","render","format"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport MovieVisualisation from './findSentimentPageComponents/MovieVisualisation.js'\r\nimport MoviePoster from './MoviePoster.js';\r\nimport \"../styles/FindSentimentStyles.css\"\r\nimport \"../styles/CompareMovieResultsStyles.css\"\r\nimport MovieTrailer from './MovieTrailer.js';\r\nimport moment from 'moment';\r\n\r\nclass MovieDetails extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      movieFound: false,\r\n      component_location : this.props.component_location,\r\n      movieId: '',\r\n      movieName : this.props.movieName,\r\n      movieOverview : '',\r\n      movieReleaseDate : '',\r\n      reviewScore : '',\r\n      twitterSentiment : [],\r\n      youtubeSentiment : [],\r\n      seeOrSkip: '',\r\n      dateAnalysed: ''\r\n    }\r\n  }\r\n\r\n  // get movie details from tmdb api\r\n  getMovieInformation(movieName) {\r\n    axios.get(\"https://api.themoviedb.org/3/search/movie\", {\r\n      params: {\r\n        api_key : '146fa0756d99220f8811aceb8a865301',\r\n        language : 'en-US',\r\n        query : movieName,\r\n        page : '1',\r\n        include_adult : 'false' \r\n      }\r\n    })\r\n    .then(apiResponse => {\r\n      if (apiResponse.data.results !== []) {\r\n        var reviewScore = \"\"\r\n\r\n        // if movie has reviews then save them\r\n        if (Number(apiResponse.data.results[0].vote_average) !== 0) {\r\n          reviewScore = apiResponse.data.results[0].vote_average\r\n        } else {\r\n          reviewScore = \"No Reviews Yet\"\r\n        }\r\n\r\n        this.setState({\r\n          movieFound : true,\r\n          movieId : apiResponse.data.results[0].id,\r\n          movieName : apiResponse.data.results[0].title,\r\n          movieOverview : apiResponse.data.results[0].overview,\r\n          movieReleaseDate : apiResponse.data.results[0].release_date,\r\n          reviewScore : reviewScore,\r\n        })\r\n\r\n        this.checkIfMovieAnalysed(this.state.movieId)\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.log(error)\r\n    })\r\n  }\r\n\r\n  // check if the movie has been analysed and stored in the db\r\n  checkIfMovieAnalysed(movie_id) {\r\n    axios.get(\"/movieSentiment/findMovieSentiment/\" + movie_id)\r\n    .then(apiResponse => {\r\n      if (apiResponse.data !== null) {\r\n\r\n        // if the movie was analysed less than 14 days ago, then save the sentiment to state\r\n        if (moment().subtract(14, \"days\").startOf(\"day\").isBefore(apiResponse.data.date_analysed)) {\r\n          this.setState({\r\n            movieFound : true,\r\n            twitterSentiment : [Number(apiResponse.data.twitter_positive_comments), Number(apiResponse.data.twitter_neutral_comments), Number(apiResponse.data.twitter_negative_comments)],\r\n            youtubeSentiment : [Number(apiResponse.data.youtube_positive_comments), Number(apiResponse.data.youtube_neutral_comments), Number(apiResponse.data.youtube_negative_comments)],\r\n            seeOrSkip: apiResponse.data.see_or_skip,\r\n            dateAnalysed: apiResponse.data.date_analysed\r\n          })\r\n\r\n          // callback to compare movies component if its being displayed on the compare page\r\n          if (this.state.component_location === \"compare\") {\r\n            this.props.handler(this.state.movieId, this.state.twitterSentiment, this.state.youtubeSentiment)\r\n          }\r\n        } else {\r\n          // if movie has not been analysed, find sentiment\r\n          this.findMovieSentiment(true)\r\n        }\r\n      } else {\r\n        this.findMovieSentiment(false)\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.log(error)\r\n    })\r\n  }\r\n\r\n  // find the movie sentiment on youtube and twitter\r\n  findMovieSentiment(isUpdate) {\r\n    const api_url = \"http://127.0.0.1:5000/see-or-skip/get_sentiment\"\r\n    const data = JSON.stringify({\r\n      movie_name : this.state.movieName\r\n    })\r\n\r\n    // make a post request to the sentiment analysis api with the movie name\r\n    axios.post(api_url, data ,{\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })  \r\n    .then(apiResponse => {  \r\n      // save movie sentiment\r\n      this.setState({\r\n        twitterSentiment : [Number(apiResponse.data.twitter_positive_comments), Number(apiResponse.data.twitter_neutral_comments), Number(apiResponse.data.twitter_negative_comments)],\r\n        youtubeSentiment : [Number(apiResponse.data.youtube_positive_comments), Number(apiResponse.data.youtube_neutral_comments), Number(apiResponse.data.youtube_negative_comments)],\r\n        dateAnalysed : new Date()\r\n      })\r\n\r\n      // if the component is being displayed on the compare page, call back to the parent component\r\n      if (this.state.component_location === \"compare\") {\r\n        this.props.handler(this.state.movieId, this.state.twitterSentiment, this.state.youtubeSentiment)        \r\n      }\r\n\r\n      // calculate see or skip\r\n      const totalPositive = Number(this.state.twitterSentiment[0]) + Number(this.state.youtubeSentiment[0])\r\n      const totalNegative = Number(this.state.twitterSentiment[2]) + Number(this.state.youtubeSentiment[2])\r\n\r\n      if (totalPositive > totalNegative) {\r\n        this.setState({\r\n          seeOrSkip : \"See!\"\r\n        })\r\n      } else {\r\n        this.setState({\r\n          seeOrSkip : \"Skip!\"\r\n        })\r\n      }\r\n\r\n      // save / update movie sentiment\r\n      if (isUpdate) {\r\n        this.updateMovieSentiment()\r\n      } else {  \r\n        this.addMovieSentimentToDatabase()\r\n      }\r\n\r\n    })\r\n    .catch(error => {\r\n      console.log(error.response)\r\n    })\r\n  }\r\n\r\n  // add a new movie sentiment to the database\r\n  addMovieSentimentToDatabase() {\r\n    // make a post request to the backend server with movie details\r\n    const api_url = \"/movieSentiment/saveMovieSentiment\"\r\n    const data = JSON.stringify({\r\n      movie_id : this.state.movieId,\r\n      movie_name : this.state.movieName,\r\n      release_date : this.state.movieReleaseDate,\r\n      twitter_positive_comments : this.state.twitterSentiment[0],\r\n      twitter_negative_comments : this.state.twitterSentiment[2],\r\n      twitter_neutral_comments : this.state.twitterSentiment[1],\r\n      youtube_positive_comments : this.state.youtubeSentiment[0],\r\n      youtube_negative_comments : this.state.youtubeSentiment[2],\r\n      youtube_neutral_comments : this.state.youtubeSentiment[1],\r\n      see_or_skip : this.state.seeOrSkip,\r\n      date_analysed : this.state.dateAnalysed\r\n    })\r\n    axios.post(api_url, data ,{\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })  \r\n    .then(apiResponse => console.log(apiResponse))\r\n    .catch(error => {\r\n      console.log(error.response)\r\n    })\r\n  }\r\n\r\n  // update movie sentiment in db\r\n  updateMovieSentiment() {\r\n    const api_url = \"/movieSentiment/updateMovieSentiment\"\r\n    const data = JSON.stringify({\r\n      movie_id : this.state.movieId,\r\n      movie_name : this.state.movieName,\r\n      release_date : this.state.movieReleaseDate,\r\n      twitter_positive_comments : this.state.twitterSentiment[0],\r\n      twitter_negative_comments : this.state.twitterSentiment[2],\r\n      twitter_neutral_comments : this.state.twitterSentiment[1],\r\n      youtube_positive_comments : this.state.youtubeSentiment[0],\r\n      youtube_negative_comments : this.state.youtubeSentiment[2],\r\n      youtube_neutral_comments : this.state.youtubeSentiment[1],\r\n      see_or_skip : this.state.seeOrSkip,\r\n      date_analysed : this.state.dateAnalysed\r\n    })\r\n\r\n    // make post request to backend server to update the movie sentiment\r\n    axios.post(api_url, data ,{\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })  \r\n    .then(apiResponse => console.log(apiResponse))\r\n    .catch(error => {\r\n      console.log(error.response)\r\n    })\r\n  }\r\n\r\n  // when the component mounts, get the movie sentiment\r\n  componentDidMount() {\r\n    this.getMovieInformation(this.state.movieName)\r\n  }\r\n\r\n  render() {\r\n    // if component is being displayed on the find sentiment page, display these objects\r\n    if (this.state.component_location === \"find\" && this.state.movieFound === true) {\r\n      return (\r\n        <div>\r\n          <div className=\"findSentimentResults\">\r\n            <h3>{this.state.movieName}</h3>\r\n            <div className=\"findSentimentMovieDetails\">\r\n              <div className=\"movieArea\">\r\n                <MoviePoster \r\n                  image_size={\"w342\"}\r\n                  movie_title={this.state.movieName}\r\n                />\r\n                <div className=\"movieInformation\">\r\n                  <p>{this.state.movieOverview}</p>\r\n                  <p>Release Date: {moment(this.state.movieReleaseDate).format(\"DD/MM/YYYY\")}</p>\r\n                  <p>Review Score: {this.state.reviewScore}</p>\r\n                  <p>You should probably: {this.state.seeOrSkip}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"movieTrailer\">\r\n              <MovieTrailer \r\n                movie_id={this.state.movieId}\r\n              />\r\n            </div>\r\n            <div className=\"visualisationArea\">\r\n              <MovieVisualisation\r\n                twitter_sentiment={this.state.twitterSentiment}\r\n                youtube_sentiment={this.state.youtubeSentiment}\r\n              />\r\n            </div>\r\n          </div>\r\n       </div>\r\n     )\r\n    } else if (this.state.component_location === \"compare\" && this.state.movieFound === true) {\r\n      // if component is being displayed on the compare page, display these components \r\n      return (\r\n        <div>\r\n            <h3>{this.state.movieName}</h3>\r\n            <div className=\"movieArea\">\r\n                <MoviePoster \r\n                    image_size={\"w185\"}\r\n                    movie_title={this.state.movieName}\r\n                />\r\n                <div className=\"compareMovieInformation\">\r\n                    <p>{this.state.movieOverview}</p>\r\n                    <p>Release Date: {moment(this.state.movieReleaseDate).format(\"DD/MM/YYYY\")}</p>\r\n                    <p>Review Score: {this.state.reviewScore}</p>\r\n                    <p>You should probably: {this.state.seeOrSkip}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <h3>Movie Not Found</h3>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default MovieDetails;"]},"metadata":{},"sourceType":"module"}